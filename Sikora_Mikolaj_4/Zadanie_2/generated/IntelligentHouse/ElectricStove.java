//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.3
//
// <auto-generated>
//
// Generated from file `intelligentHouse.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package IntelligentHouse;

public interface ElectricStove extends TemperatureSensor
{
    void setDefaultTemperature(Temperature t, com.zeroc.Ice.Current current);

    Temperature getDefaultTemperature(com.zeroc.Ice.Current current);

    java.util.Map<DayPeriod, Temperature> getHeatingPlan(com.zeroc.Ice.Current current);

    void changeHeatingPlanElement(DayPeriod dayPeriod, Temperature temperature, com.zeroc.Ice.Current current);

    /** @hidden */
    static final String[] _iceIds =
    {
        "::Ice::Object",
        "::IntelligentHouse::Device",
        "::IntelligentHouse::ElectricStove",
        "::IntelligentHouse::TemperatureSensor"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::IntelligentHouse::ElectricStove";
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_setDefaultTemperature(ElectricStove obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        Temperature iceP_t;
        iceP_t = Temperature.ice_read(istr);
        inS.endReadParams();
        obj.setDefaultTemperature(iceP_t, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getDefaultTemperature(ElectricStove obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        Temperature ret = obj.getDefaultTemperature(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        Temperature.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getHeatingPlan(ElectricStove obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        java.util.Map<DayPeriod, Temperature> ret = obj.getHeatingPlan(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        HeatingPlanHelper.write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_changeHeatingPlanElement(ElectricStove obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        DayPeriod iceP_dayPeriod;
        Temperature iceP_temperature;
        iceP_dayPeriod = DayPeriod.ice_read(istr);
        iceP_temperature = Temperature.ice_read(istr);
        inS.endReadParams();
        obj.changeHeatingPlanElement(iceP_dayPeriod, iceP_temperature, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /** @hidden */
    final static String[] _iceOps =
    {
        "changeHeatingPlanElement",
        "changeWorkingState",
        "getDefaultTemperature",
        "getHeatingPlan",
        "getIndoorTemperature",
        "getOutdoorTemperature",
        "getState",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "setDefaultTemperature"
    };

    /** @hidden */
    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceDispatch(com.zeroc.IceInternal.Incoming in, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        int pos = java.util.Arrays.binarySearch(_iceOps, current.operation);
        if(pos < 0)
        {
            throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return _iceD_changeHeatingPlanElement(this, in, current);
            }
            case 1:
            {
                return Device._iceD_changeWorkingState(this, in, current);
            }
            case 2:
            {
                return _iceD_getDefaultTemperature(this, in, current);
            }
            case 3:
            {
                return _iceD_getHeatingPlan(this, in, current);
            }
            case 4:
            {
                return TemperatureSensor._iceD_getIndoorTemperature(this, in, current);
            }
            case 5:
            {
                return TemperatureSensor._iceD_getOutdoorTemperature(this, in, current);
            }
            case 6:
            {
                return Device._iceD_getState(this, in, current);
            }
            case 7:
            {
                return com.zeroc.Ice.Object._iceD_ice_id(this, in, current);
            }
            case 8:
            {
                return com.zeroc.Ice.Object._iceD_ice_ids(this, in, current);
            }
            case 9:
            {
                return com.zeroc.Ice.Object._iceD_ice_isA(this, in, current);
            }
            case 10:
            {
                return com.zeroc.Ice.Object._iceD_ice_ping(this, in, current);
            }
            case 11:
            {
                return _iceD_setDefaultTemperature(this, in, current);
            }
        }

        assert(false);
        throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
    }
}
